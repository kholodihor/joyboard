generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  boardIds String[] @db.ObjectId
  boards   Board[]  @relation(fields: [boardIds], references: [id])

  cardIds String[] @db.ObjectId
  cards   Card[]   @relation(fields: [cardIds], references: [id])
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Board {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title String
  image String

  userIds String[] @db.ObjectId
  userEmails String[]
  Users   User[]   @relation(fields: [userIds], references: [id])

  lists     List[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Card      Card[]
}

model List {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  order   Int
  boardId String @db.ObjectId
  board   Board  @relation(fields: [boardId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  cards Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  order       Int

  description String?
  listId      String    @db.ObjectId
  list        List      @relation(fields: [listId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  boardId     String    @db.ObjectId
  board       Board     @relation(fields: [boardId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userIds     String[]  @db.ObjectId
  users       User[]    @relation(fields: [userIds], references: [id])

  label       String[]
  comments    Comment[]
  todos       Todo[]
  links       String[]
  dateTo      DateTime?
  isCompleted Boolean   @default(false)
  trackedTimes String[] 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

type Todo{
  id          String?
  content     String?
  completed   Boolean?
}

type Comment{
  id   String?
  text String?
  image String?
  user  String?
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum TABLE_TYPE {
  BOARD
  LIST
  CARD
}